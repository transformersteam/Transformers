@using DongXu.Target.Web.Conn;
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <script type="text/javascript" src="~/zTree_v3/js/jquery-1.4.4.min.js"></script>
    <link href="~/layui-v2.4.5/layui/css/layui.css" rel="stylesheet" />
    @*<link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />*@

    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">

    <link href="~/zTree_v3/css/demo.css" rel="stylesheet" type="text/css" />
    <link href="~/zTree_v3/css/awesomeStyle/awesome.css" rel="stylesheet" />

    <script type="text/javascript" src="~/zTree_v3/js/jquery.ztree.core.js"></script>
    <script type="text/javascript" src="~/zTree_v3/js/jquery.ztree.excheck.js"></script>
    <script type="text/javascript" src="~/zTree_v3/js/jquery.ztree.exedit.js"></script>
    <script src="~/zTree_v3/js/jquery.ztree.all.min.js"></script>
    <script src="~/js/vue.js"></script>
    <script src="~/js/axios.js"></script>
    <script src="~/layui-v2.4.5/layui/layui.js"></script>


    <style>
    #max {
        width: 90%;
        height: 200px;
        margin-left: 30px;
    }

    #tree {
        width: 30%;
        height: 300px;
        float: left;
    }

    #message {
        width: 60%;
        height: 100%;
        float: left;
    }

        #message table {
            margin-top: 50px;
            border-collapse: separate;
            border-spacing: 0px 10px;
        }


    </style>
    <style type="text/css">

        div#rMenu {
            position: absolute;
            visibility: hidden;
            top: 0;
            background-color: #555;
            text-align: left;
            padding: 2px;
        }

            div#rMenu ul li {
                margin: 1px 0;
                padding: 0 5px;
                cursor: pointer;
                list-style: none outside none;
                background-color: #DFDFDF;
            }
    </style>
</head>
<body>
    <div style="margin-left: 40px;padding-top: 50px">您当前的位置:系统管理>>组织管理</div>
    <div id="max">
        <br />
        <div class="panel-heading" style="height:50px;width:2250px;font-size:25px">组织管理</div>
        <div class="content_wrap" id="tree">
            <div class="bg left">
                <ul id="regionZTree" class="ztree" style="width:270px"></ul>
            </div>
        </div>
            <div id="rMenu">
                <ul>
                    <li id="m_add" onclick="addTreeNode();">增加节点</li>
                    <li id="m_del" onclick="removeTreeNode();">删除节点</li>
                    <li id="m_check" onclick="checkTreeNode(true);">Check节点</li>
                    <li id="m_unCheck" onclick="checkTreeNode(false);">unCheck节点</li>
                    <li id="m_reset" onclick="resetTree();">恢复zTree</li>
                </ul>
            </div>
            <div id="message">
                <table class="layui-table" style="text-align: center;background-color:#F3F3F4">
                    <tr>
                        <td>组织名称:</td>
                        <td><input id="txtName" type="text" v-model="RoleName" /></td>
                        <td>组织层级</td>
                        <td>
                            <select id="selIdentify" v-model="RoleIdentify" class="form-control">
                                <option :value="hierarchy.id" v-for="hierarchy in hierarchyList">{{hierarchy.name}}</option>
                            </select>
                        </td>
                    </tr>
                    <tr></tr>
                    <tr></tr>
                    <tr>
                        <td>组织状态:</td>
                        <td>
                            <input id="Radio1" type="radio" value="1" v-model="RoleIsEnable" /> 启用
                            <input id="Radio1" type="radio" value="0" v-model="RoleIsEnable" /> 禁用
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr></tr>
                    <tr></tr>
                    <tr>
                        <td>创建人:</td>
                        <td><input id="createPeople" type="text" v-model="RoleCreatePeople" readonly /></td>
                        <td>创建时间:</td>
                        <td><input id="createTime" type="text" v-model="RoleCreateTime" readonly /></td>
                    </tr>
                    <tr></tr>
                    <tr></tr>
                    <tr>
                        <td>修改人:</td>
                        <td>
                            <input id="updatePeople" type="text" v-model="RoleModifyPeople" readonly />
                        </td>
                        <td>修改时间:</td>
                        <td><input id="updateTime" type="text" v-model="RoleModifyTime" readonly /></td>
                    </tr>
                    <tr></tr>
                    <tr></tr>
                    <tr>
                        <td colspan="4"><input id="Button1" type="button" v-on:click="updateRole(RoleId,RoleName,RoleIsEnable,RoleIdentify,'超级管理员')" value="修改" class="layui-btn layui-btn-normal" /></td>
                    </tr>
                </table>
            </div>
        </div>
</body>
</html>
<script type="text/javascript">
    var zNodes = "";
    var RoleName = "";
    var name = "NewNode";
    var date = new Date();
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    if (month < 10) {
        month = "0" + month;
    }
    if (day < 10) {
        day = "0" + day;
    }
    var nowDate = year + "-" + month + "-" + day;
    $(function () {
        GetRolesOList();
    })

    function zTreeBeforeExpand(treeId, treeNode) {
        return true;
    };
    var setting = {
        view: {
            addHoverDom: addHoverDom,
            removeHoverDom: removeHoverDom,
            selectedMulti: true //设置是否允许同时选中多个节点
        },
        check: {
            chkStyle: 'radio', 
            radioType: "level",
            enable: true //每个节点上是否显示 CheckBox
        },
        //增删改，移动复制
        edit: {
            enable: true, //如果enable为flase，那么树就不能移动了
            //showRemoveBtn: true, //是否显示树的删除按钮
            //showRenameBtn: true, //是否显示数的重命名按钮
            //isSimpleData: true, //数据是否采用简单 Array 格式，默认false
            //treeNodeKey: "id",  //在isSimpleData格式下，当前节点id属性
            //treeNodeParentKey: "parentId",//在isSimpleData格式下，当前节点的父节点id属性
            //showLine: true, //是否显示节点间的连线
            //removeTitle: "删除节点",//删除Logo的提示
            //renameTitle: "编辑节点",//修改Logo的提示
            ////拖拽
            //drag: {
            //    isCopy: true,//能够复制
            //    isMove: true,//能够移动
            //    prev: false,//不能拖拽到节点前
            //    next: false,//不能拖拽到节点后
            //    inner: true//只能拖拽到节点中
            //}
        },
        data: {
            simpleData: {//简单数据模式
                enable: true,
                idKey: "id",
                pIdKey: "pId",
                rootPId: null
            }
        },
        callback: {
            beforeExpand: zTreeBeforeExpand, // 用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作
            //单击事件
            onClick: zTreeOnClick,
            onRename: zTreeOnRename,//修改
            onRemove: zTreeOnRemove,//删除
            onRightClick: OnRightClick
        }
    };
    //获取结点
    function GetRolesOList() {

        $.ajax({
            url: "@APIConn.MyAPIConn"+"/Organization/GetRolesOList",
            async: false,
            success: function (data) {
                var json = eval(data); // 数组
                zNodes = "[";
                $.each(json, function (index, item) {
                    if (json[index].rolePid == 0) {                        zNodes += "{id:" + json[index].roleId
                            + ",pId:" + json[index].rolePid
                            + ",name:'" + json[index].roleName
                            + "',open:true}";
                    }
                    else {
                        zNodes += "{id:" + json[index].roleId
                            + ",pId:" + json[index].rolePid
                            + ",name:'" + json[index].roleName
                            + "'}";
                    }
                    if (index != json.length - 1)
                        zNodes += ",";
                });
                zNodes += "]";
                zNodes = eval(zNodes);
                //zTreeObj = $.fn.zTree.init($("#regionZTree"), setting, zNodes);
            },
            error: function (e) {
            }
        });
    };
    //右键点击事件
    function OnRightClick(event, treeId, treeNode) {
        if (!treeNode && event.target.tagName.toLowerCase() != "button" && $(event.target).parents("a").length == 0) {
            zTree.cancelSelectedNode();
            showRMenu("root", event.clientX, event.clientY);
        } else if (treeNode && !treeNode.noR) {
            zTree.selectNode(treeNode);
            showRMenu("node", event.clientX, event.clientY);
        }
    }
    //选中结点
    function checkTreeNode(checked) {
        var nodes = zTree.getSelectedNodes();
        if (nodes && nodes.length > 0) {
            zTree.checkNode(nodes[0], checked, true);
        }
        hideRMenu();
    }
    //恢复结点
    function resetTree() {
        hideRMenu();
        $.fn.zTree.init($("#treeDemo"), setting, zNodes);
    }

    function setCheck() {
        setting.check.chkStyle = $("#r1").attr("checked") ? "checkbox" : "radio";
        setting.check.enable = (!$("#disablechk").attr("checked"));
        $.fn.zTree.init($("#regionZTree"), setting, zNodes);
    }
    $(document).ready(function () {
        $.fn.zTree.init($("#regionZTree"), setting, zNodes);
        setCheck();
        $("#r1").bind("change", setCheck);
        $("#r2").bind("change", setCheck);
        $("#disablechk").bind("change", setCheck);
    });
    //显示右菜单
    function showRMenu(type, x, y) {
        $("#rMenu ul").show();
        if (type == "root") {
            $("#m_del").hide();
            $("#m_check").hide();
            $("#m_unCheck").hide();
        } else {
            $("#m_del").show();
            $("#m_check").show();
            $("#m_unCheck").show();
        }

        y += document.body.scrollTop;
        x += document.body.scrollLeft;
        rMenu.css({ "top": y + "px", "left": x + "px", "visibility": "visible" });

        $("body").bind("mousedown", onBodyMouseDown);
    }
    function hideRMenu() {
        if (rMenu) rMenu.css({ "visibility": "hidden" });
        $("body").unbind("mousedown", onBodyMouseDown);
    }
    function onBodyMouseDown(event) {
        if (!(event.target.id == "rMenu" || $(event.target).parents("#rMenu").length > 0)) {
            rMenu.css({ "visibility": "hidden" });
        }
    }
    //点击事件
    function zTreeOnClick(event, treeId, treeNode) {
        $.ajax({
            url: "@APIConn.MyAPIConn"+"/Organization/GetRolesOListById?RoleId=" + treeNode.id,
            async: false,
            success: function (data) {
                vm.$data.RoleId = data.roleId;
                vm.$data.RoleName = data.roleName;
                vm.$data.RoleIdentify = data.roleIdentify;
                if (data.roleIsEnable == 1) {
                    vm.$data.RoleIsEnable = "1";
                }
                else {
                    vm.$data.RoleIsEnable = "0";
                }

                vm.$data.RoleCreatePeople = data.roleCreatePeople;
                vm.$data.RoleCreateTime = data.roleCreateTime;
                if (data.roleModifyPeople == undefined) {
                    vm.$data.RoleModifyPeople = "无人修改";
                }
                else {
                    vm.$data.RoleModifyPeople = data.roleModifyPeople;
                }
                if (data.roleModifyTime == undefined) {
                    vm.$data.RoleModifyTime = "无修改时间";
                }
                else {
                    vm.$data.RoleModifyTime = data.roleModifyTime;
                }
            }
        })
    }
    /**
     * 修改子节点
     * param obj
     */
    function editZTreeNode(obj) {
        var zTree = $.fn.zTree.getZTreeObj("regionZTree");
        var nodes = zTree.getSelectedNodes();
        for (var i = 0; i < nodes.length; i++) {
            nodes[i].name = obj;
            zTree.updateNode(nodes[i]);
        }
    }
    /**
     *  删除子节点 --选中节点
     * param obj
     */
    function removeZTreeNodeBySelect() {
        var zTree = $.fn.zTree.getZTreeObj("regionZTree");
        var nodes = zTree.getSelectedNodes(); //获取选中节点
        for (var i = 0; i < nodes.length; i++) {
            zTree.removeNode(nodes[i]);
        }
    }

    /**
     *  删除子节点 --勾选节点
     * param obj
     */
    function removeZTreeNodeByChecked() {
        var zTree = $.fn.zTree.getZTreeObj("regionZTree");
        var nodes = zTree.getCheckedNodes(true); //获取勾选节点
        for (var i = 0; i < nodes.length; i++) {
            zTree.removeNode(nodes[i]);
        }
    }

    /**
     *  根据节点id 批量删除子节点
     * param obj
     */
    function removeZTreeNodebPi(obj) {
        var idnodes = obj.split(",");
        var zTree = $.fn.zTree.getZTreeObj("regionZTree");
        var nodes = zTree.getSelectedNodes();
        for (var i = 0; i < nodes.length; i++) {
            var nodes = zTree.getNodeByParam("id", nodes[i]);
            zTree.removeNode(nodes);
        }
    }
    //添加
    var newCount = 1;
    function addHoverDom(treeId, treeNode) {
        hideRMenu();
        console.log(treeNode);
        var sObj = $("#" + treeNode.tId + "_span");
        if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId).length > 0) return;
        var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
            + "' title='添加子节点' onfocus='this.blur();'></span>";
        sObj.after(addStr);
        var btn = $("#addBtn_" + treeNode.tId);
        if (btn) btn.bind("click", function () {
            var zTree = $.fn.zTree.getZTreeObj("regionZTree");
            var name = "NewNode";
            var date = new Date();
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            if (month < 10) {
                month = "0" + month;
            }
            if (day < 10) {
                day = "0" + day;
            }
            var nowDate = year + "-" + month + "-" + day;
            var model = { RoleName:name, RolePid: treeNode.id, RoleCreatePeople: "管理员", RoleCreateTime: nowDate };
            var val = JSON.stringify(model);
            $.ajax({
                url: "@APIConn.MyAPIConn"+"/Organization/AddRolesO",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: val,
                crossDomain: true,
                dataType: 'json',
                success: function (data) {
                    var newnade = { id: data, name: name, pId: treeNode.id };
                    zTree.addNodes(treeNode, newnade);
                    var node = zTree.getNodeByParam("id", data, null); //根据新的id找到新添加的节点
                    zTree.selectNode(node); //让新添加的节点处于选中状态

                }
            });
            return false;
        });
    }
    //右键添加
    var addCount = 1;
    function addTreeNode() {
        hideRMenu();
        var newNode = { name: "增加" + (addCount++) };
        if (zTree.getSelectedNodes()[0]) {
            newNode.checked = zTree.getSelectedNodes()[0].checked;
            zTree.addNodes(zTree.getSelectedNodes()[0], newNode);
        } else {
            zTree.addNodes(null, newNode);
        }
    }
    //右键删除
    function removeTreeNode() {
        hideRMenu();
        var nodes = zTree.getSelectedNodes();
        if (nodes && nodes.length > 0) {
            if (nodes[0].children && nodes[0].children.length > 0) {
                var msg = "要删除的节点是父节点，如果删除将连同子节点一起删掉。\n\n请确认！";
                if (confirm(msg) == true) {
                    zTree.removeNode(nodes[0]);
                }
            } else {
                zTree.removeNode(nodes[0]);
            }
        }
    }
        /**
     * 选择节点
     * param obj
     */
    function removeHoverDom(treeId, treeNode) {
        $("#addBtn_" + treeNode.tId).unbind().remove();

    };
    //删除节点
    function zTreeOnRemove(event, treeId, treeNode) {
        hideRMenu();
            $.ajax({
                url: "@APIConn.MyAPIConn"+"/Organization/DeleteRolesO?id=" + treeNode.id,
                type: "get",
                success: function (data) {
                    if (data > 0) {
                    }
                    else {
                        alert('删除失败');
                    }
                }

            });
    }
    //修改节点
    function zTreeOnRename(event, treeId, treeNode) {
        var date = new Date();
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        if (month < 10) {
            month = "0" + month;
        }
        if (day < 10) {
            day = "0" + day;
        }
        var nowDate = year + "-" + month + "-" + day;
        var model = { "roleId": treeNode.id, "roleName": treeNode.name, "roleModifyPeople": "超级管理员", "roleModifyTime": nowDate };
        var val = JSON.stringify(model);
        $.ajax({
            url: "@APIConn.MyAPIConn"+"/Organization/UpdateRolesOName",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: val,
            crossDomain: true,
            dataType: 'json',
            success: function (data) {
                if (data > 0) {
                }
                else {
                    alert('修改失败');
                }
            }
        });
    };
    var zTree, rMenu;
    $(document).ready(function () {
        $.fn.zTree.init($("#regionZTree"), setting, zNodes);
        zTree = $.fn.zTree.getZTreeObj("regionZTree");
        rMenu = $("#rMenu");
    });
    var vm = new Vue({
        el: "#max",
        data: {
            RoleId: "",
            RoleName: "",
            RoleIdentify: "",
            RoleIsEnable: "1",
            RoleCreatePeople: "",
            RoleCreateTime: "",
            RoleModifyPeople: "",
            RoleModifyTime: "",
            hierarchyList: [
                { id: '0', name: '集团总部' },
                { id: '1', name: '集团公司' },
                { id: '2', name: '集团部门' }
            ],
        },
        created() {

        },
        methods: {
            updateRole: function (RoleId, RoleName, RoleIsEnable, RoleIdentify, RoleModifyPeople) {
                var params = new URLSearchParams();
                params.append('RoleId', RoleId);
                params.append('RoleName', RoleName);
                params.append('RoleIsEnable', RoleIsEnable);
                params.append('RoleIdentify', RoleIdentify);
                params.append('RoleModifyPeople', RoleModifyPeople);
                params.append('RoleModifyTime', nowDate);

                axios.post("/Organization/UpdateRolesO", params).then((response) => {
                    if (response.data > 0) {
                        /*根据 treeId 获取 zTree 对象*/
                        var zTree = $.fn.zTree.getZTreeObj("regionZTree"),
                            type = "refresh",
                            silent = false,
                            /*获取 zTree 当前被选中的节点数据集合*/
                            nodes = zTree.getSelectedNodes();
                        /*强行异步加载父节点的子节点。[setting.async.enable = true 时有效]*/
                        zTree.reAsyncChildNodes(nodes[0], type, silent);
                        alert('修改成功');
                    }
                });
            }
        }
    })
</script>