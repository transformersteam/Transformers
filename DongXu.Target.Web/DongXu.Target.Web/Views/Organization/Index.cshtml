
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link href="~/zTree_v3/css/zTreeStyle/zTreeStyle.css" rel="stylesheet" />
    <script src="~/js/jquery-3.3.1.js"></script>
    <script src="~/zTree_v3/js/jquery.ztree.all.min.js"></script>
    <script src="~/js/vue.js"></script>
    <style>
        #max {
            width: 1500px;
            height: 600px;
            margin-left: 30px;
        }

        #title {
            width: 100%;
            height: 60px;
        }

            #title p {
                margin-left: 15px;
                margin-top: 15px;
            }

        #tree {
            width: 30%;
            height: 100%;
            float: left;
            border: 1px solid #000
        }

        #message {
            height: 70%;
            height: 100%;
            float: left;
            border: 1px solid #000
        }

            #message table {
                width: 600px;
                margin-left: 100px;
                margin-top: 50px;
                border-collapse: separate;
                border-spacing: 0px 10px;
            }
    </style>
</head>

<body>
    <div id="max">
        <div id="title"><p>组织管理</p></div>
        <div id="tree">
            <ul id="regionZTree" class="ztree"></ul>
        </div>
        <div id="message">
            <table>
                <tr>
                    <td>组织名称:</td>
                    <td><input id="txtName" type="text" /></td>
                    <td>组织层级</td>
                    <td>
                        <select id="selIdentify">
                            <option :value="hierarchy.id" v-for="hierarchy in hierarchyList">{{hierarchy.name}}</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>组织状态:</td>
                    <td>
                        <input id="Radio1" type="radio" name="rdState" checked /> 启用
                        <input id="Radio1" type="radio" name="rdState" /> 禁用
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td>创建人:</td>
                    <td><span id="createPeople"></span></td>
                    <td>创建时间:</td>
                    <td><span id="createTime"></span></td>
                </tr>
                <tr>
                    <td>修改人:</td>
                    <td><span id="updatePeople"></span></td>
                    <td>修改时间:</td>
                    <td><span id="updateTime"></span></td>
                </tr>
            </table>
        </div>
    </div>
</body>
</html>
<script>
    function zTreeBeforeExpand(treeId, treeNode) {
        return true;
    };
    var setting = {
        view: {
            dblClickExpand: false,//双击节点时，是否自动展开父节点的标识
            showLine: true,//是否显示节点之间的连线
            fontCss: { 'color': 'black', 'font-weight': 'bold' },//字体样式函数
            selectedMulti: true, //设置是否允许同时选中多个节点
            addHoverDom: addHoverDom,
            removeHoverDom: removeHoverDom
        },
        check: {
            //chkboxType: { "Y": "ps", "N": "ps" },
            chkboxType: { "Y": "", "N": "" },
            chkStyle: "checkbox",//复选框类型
            enable: true //每个节点上是否显示 CheckBox
        },
        //增删改，移动复制
        edit: {
            enable: true, //如果enable为flase，那么树就不能移动了
            showRemoveBtn: true, //是否显示树的删除按钮
            showRenameBtn: true, //是否显示数的重命名按钮
            isSimpleData: true, //数据是否采用简单 Array 格式，默认false
            treeNodeKey: "id",  //在isSimpleData格式下，当前节点id属性
            treeNodeParentKey: "parentId",//在isSimpleData格式下，当前节点的父节点id属性
            showLine: true, //是否显示节点间的连线
            removeTitle: "删除节点",//删除Logo的提示
            renameTitle: "编辑节点",//修改Logo的提示
            //拖拽
            drag: {
                isCopy: true,//能够复制
                isMove: true,//能够移动
                prev: false,//不能拖拽到节点前
                next: false,//不能拖拽到节点后
                inner: true//只能拖拽到节点中
            }
        },
        data: {
            simpleData: {//简单数据模式
                enable: true,
                idKey: "id",
                pIdKey: "pId",
                rootPId: null
            }
        },
        callback: {
            beforeExpand: zTreeBeforeExpand, // 用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作
        }
    };
    //zTreeNodes = [
    //    {
    //        "name": "网站导航", open: true, children: [
    //            { "name": "google", "url": "http://g.cn", "target": "_blank" },
    //            { "name": "baidu", "url": "http://baidu.com", "target": "_blank" },
    //            { "name": "sina", "url": "http://www.sina.com.cn", "target": "_blank" }
    //        ]
    //    }
    //];
     zNodes = [

        //给节点额外增加属性来控制“重命名”、“删除”图标的显示或隐藏
        { id: 1, pId: 0, name: "父节点 1", open: true, noRemoveBtn: true, noEditBtn: true },
        { id: 11, pId: 1, name: "叶子节点 1-1", noRemoveBtn: true, noEditBtn: true },
        { id: 12, pId: 1, name: "叶子节点 1-2" },
        { id: 13, pId: 1, name: "叶子节点 1-3" },
        { id: 2, pId: 0, name: "父节点 2", open: true },
        { id: 21, pId: 2, name: "叶子节点 2-1" },
        { id: 22, pId: 2, name: "叶子节点 2-2" },
        { id: 23, pId: 2, name: "叶子节点 2-3" },
        { id: 3, pId: 0, name: "父节点 3", open: true },
        { id: 31, pId: 3, name: "叶子节点 3-1" },
        { id: 32, pId: 3, name: "叶子节点 3-2" },
        { id: 33, pId: 3, name: "叶子节点 3-3" }
    ];
    zTreeObj = $.fn.zTree.init($("#regionZTree"), setting, zNodes);
    /**
     *
 * 添加节点
 * param obj
 */
function addZTreeNode(obj) {
    var treeObj = $.fn.zTree.getZTreeObj("regionZTree");
    var parentZNode = treeObj.getSelectedNodes(); //获取父节点
    var newNode = obj;
    newNode.nodeFlg = 1;  // 可以自定义节点标识
    newNode = treeObj.addNodes(parentZNode[0], newNode,true);
}
/**
 * 修改子节点
 * param obj
 */
function editZTreeNode(obj) {
    var zTree = $.fn.zTree.getZTreeObj("regionZTree");
    var nodes = zTree.getSelectedNodes();
    for(var i = 0;i<nodes.length;i++)
    {
        nodes[i].name = obj;
        zTree.updateNode(nodes[i]);
    }
}

/**
 *  删除子节点 --选中节点
 * param obj
 */
function removeZTreeNodeBySelect() {
    var zTree = $.fn.zTree.getZTreeObj("regionZTree");
    var nodes = zTree.getSelectedNodes(); //获取选中节点
    for (var i=0;i<nodes.length; i++) {
        zTree.removeNode(nodes[i]);
    }
}

/**
 *  删除子节点 --勾选节点
 * param obj
 */
function removeZTreeNodeByChecked() {
    var zTree = $.fn.zTree.getZTreeObj("regionZTree");
    var nodes =  zTree.getCheckedNodes(true); //获取勾选节点
    for (var i=0;i<nodes.length; i++) {
        zTree.removeNode(nodes[i]);
    }
}

/**
 *  根据节点id 批量删除子节点
 * param obj
 */
function removeZTreeNodebPi(obj) {
    var idnodes = obj.split(",");
    var zTree = $.fn.zTree.getZTreeObj("regionZTree");
    var nodes = zTree.getSelectedNodes();
    for (var i=0;i<nodes.length; i++) {
        var nodes = zTree.getNodeByParam("id", nodes[i]);
        zTree.removeNode(nodes);
    }
}
/**
 * 选择节点
 * param obj
 */
    var newCount = 1;
    function addHoverDom(treeId, treeNode) {
        var sObj = $("#" + treeNode.tId + "_span");
        if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId).length > 0) return;
        var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
            + "' title='添加子节点' onfocus='this.blur();'></span>";
        sObj.after(addStr);
        var btn = $("#addBtn_" + treeNode.tId);
        if (btn) btn.bind("click", function () {
            var zTree = $.fn.zTree.getZTreeObj("regionZTree");
            var newnade = { id: (100 + newCount), name: "new node" + (newCount++) };
            zTree.addNodes(treeNode, newnade);

            $.ajax({
                url: 'tree.json',
                type: "get",
                dataType: "json",
                success: function (data) {
                    data.push(JSON.parse(newnade));
                    console.log(JSON.stringify(data));
                    //alert(data[0].children[0].children[0].id);
                }
            });
            return false;
        });

    }
    function removeHoverDom(treeId, treeNode) {
        $("#addBtn_" + treeNode.tId).unbind().remove();
    };
    var vm = new Vue({
        el: "#max",
        data: {
            hierarchyList: [
                { id: '0', name:'集团总部'},
                { id: '1', name: '集团公司'},
                { id: '2', name: '集团部门'}
                ],
        },
        created() {
        },
        methods: {

        }
    })
</script>